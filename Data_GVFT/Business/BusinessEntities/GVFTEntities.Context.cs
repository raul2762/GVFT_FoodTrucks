//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data_GVFT.Business.BusinessEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_SystemFoodTrucksEntities : DbContext
    {
        public DB_SystemFoodTrucksEntities()
            : base("name=DB_SystemFoodTrucksEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Credits> Credits { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<Detail_invoice> Detail_invoice { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<Login_FT> Login_FT { get; set; }
        public virtual DbSet<Merchandise> Merchandise { get; set; }
        public virtual DbSet<Method_of_payment> Method_of_payment { get; set; }
        public virtual DbSet<Mov_CxC_Employees> Mov_CxC_Employees { get; set; }
        public virtual DbSet<Paid_orders> Paid_orders { get; set; }
        public virtual DbSet<Paysheet> Paysheet { get; set; }
        public virtual DbSet<PaysheetModePay> PaysheetModePay { get; set; }
        public virtual DbSet<Pending_Orders> Pending_Orders { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<purchase_of_merchandise> purchase_of_merchandise { get; set; }
        public virtual DbSet<Roles_Account> Roles_Account { get; set; }
        public virtual DbSet<Status_Account> Status_Account { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
        public virtual DbSet<Trans_type> Trans_type { get; set; }
        public virtual DbSet<Type_Credits> Type_Credits { get; set; }
        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<Busy_tables> Busy_tables { get; set; }
    
        public virtual int RegisterLogin(string username, string loginPass, Nullable<int> rol, Nullable<int> statusAcc, Nullable<System.DateTime> regDate, Nullable<int> idEmployee, string quest, string amswer)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var loginPassParameter = loginPass != null ?
                new ObjectParameter("LoginPass", loginPass) :
                new ObjectParameter("LoginPass", typeof(string));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(int));
    
            var statusAccParameter = statusAcc.HasValue ?
                new ObjectParameter("StatusAcc", statusAcc) :
                new ObjectParameter("StatusAcc", typeof(int));
    
            var regDateParameter = regDate.HasValue ?
                new ObjectParameter("RegDate", regDate) :
                new ObjectParameter("RegDate", typeof(System.DateTime));
    
            var idEmployeeParameter = idEmployee.HasValue ?
                new ObjectParameter("IdEmployee", idEmployee) :
                new ObjectParameter("IdEmployee", typeof(int));
    
            var questParameter = quest != null ?
                new ObjectParameter("Quest", quest) :
                new ObjectParameter("Quest", typeof(string));
    
            var amswerParameter = amswer != null ?
                new ObjectParameter("Amswer", amswer) :
                new ObjectParameter("Amswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterLogin", usernameParameter, loginPassParameter, rolParameter, statusAccParameter, regDateParameter, idEmployeeParameter, questParameter, amswerParameter);
        }
    
        public virtual int SP_AddCategory(string nameCategory, string description)
        {
            var nameCategoryParameter = nameCategory != null ?
                new ObjectParameter("NameCategory", nameCategory) :
                new ObjectParameter("NameCategory", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddCategory", nameCategoryParameter, descriptionParameter);
        }
    
        public virtual int SP_AddClient(string nameClient, string phone)
        {
            var nameClientParameter = nameClient != null ?
                new ObjectParameter("NameClient", nameClient) :
                new ObjectParameter("NameClient", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddClient", nameClientParameter, phoneParameter);
        }
    
        public virtual int SP_AddCreditTcredits(string codeCredit, Nullable<int> amount, Nullable<System.DateTime> expireDate, Nullable<int> typeCredit, Nullable<int> cant, Nullable<int> expiryMode)
        {
            var codeCreditParameter = codeCredit != null ?
                new ObjectParameter("CodeCredit", codeCredit) :
                new ObjectParameter("CodeCredit", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var expireDateParameter = expireDate.HasValue ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(System.DateTime));
    
            var typeCreditParameter = typeCredit.HasValue ?
                new ObjectParameter("TypeCredit", typeCredit) :
                new ObjectParameter("TypeCredit", typeof(int));
    
            var cantParameter = cant.HasValue ?
                new ObjectParameter("Cant", cant) :
                new ObjectParameter("Cant", typeof(int));
    
            var expiryModeParameter = expiryMode.HasValue ?
                new ObjectParameter("ExpiryMode", expiryMode) :
                new ObjectParameter("ExpiryMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddCreditTcredits", codeCreditParameter, amountParameter, expireDateParameter, typeCreditParameter, cantParameter, expiryModeParameter);
        }
    
        public virtual int SP_AddDepartment(string nameDepart)
        {
            var nameDepartParameter = nameDepart != null ?
                new ObjectParameter("NameDepart", nameDepart) :
                new ObjectParameter("NameDepart", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddDepartment", nameDepartParameter);
        }
    
        public virtual int SP_AddInvoice(Nullable<int> idClient, Nullable<System.DateTime> date, Nullable<int> idUser, string nameOrder, string product, string qty, Nullable<int> idOrder, Nullable<int> idx, string price, ObjectParameter error, ObjectParameter messageP)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            var nameOrderParameter = nameOrder != null ?
                new ObjectParameter("NameOrder", nameOrder) :
                new ObjectParameter("NameOrder", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var qtyParameter = qty != null ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(string));
    
            var idOrderParameter = idOrder.HasValue ?
                new ObjectParameter("IdOrder", idOrder) :
                new ObjectParameter("IdOrder", typeof(int));
    
            var idxParameter = idx.HasValue ?
                new ObjectParameter("Idx", idx) :
                new ObjectParameter("Idx", typeof(int));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddInvoice", idClientParameter, dateParameter, idUserParameter, nameOrderParameter, productParameter, qtyParameter, idOrderParameter, idxParameter, priceParameter, error, messageP);
        }
    
        public virtual int SP_AddMerchandise(string nameMerchan, Nullable<int> stock)
        {
            var nameMerchanParameter = nameMerchan != null ?
                new ObjectParameter("NameMerchan", nameMerchan) :
                new ObjectParameter("NameMerchan", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddMerchandise", nameMerchanParameter, stockParameter);
        }
    
        public virtual int SP_AddMethodPay(string pay)
        {
            var payParameter = pay != null ?
                new ObjectParameter("Pay", pay) :
                new ObjectParameter("Pay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddMethodPay", payParameter);
        }
    
        public virtual int SP_AddProduct(string nameProduct, Nullable<int> price, Nullable<int> idCategory)
        {
            var nameProductParameter = nameProduct != null ?
                new ObjectParameter("NameProduct", nameProduct) :
                new ObjectParameter("NameProduct", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var idCategoryParameter = idCategory.HasValue ?
                new ObjectParameter("IdCategory", idCategory) :
                new ObjectParameter("IdCategory", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddProduct", nameProductParameter, priceParameter, idCategoryParameter);
        }
    
        public virtual int SP_AddRoles(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddRoles", roleNameParameter);
        }
    
        public virtual int SP_AddStatusAcc(string statusName)
        {
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddStatusAcc", statusNameParameter);
        }
    
        public virtual int SP_AddSupplier(string supplierName, string address, string city, string phone)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddSupplier", supplierNameParameter, addressParameter, cityParameter, phoneParameter);
        }
    
        public virtual int SP_AddTransType(string typeTrans)
        {
            var typeTransParameter = typeTrans != null ?
                new ObjectParameter("TypeTrans", typeTrans) :
                new ObjectParameter("TypeTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddTransType", typeTransParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_MovCxCEmployee(Nullable<int> idEmployee, Nullable<int> amountCharge, Nullable<System.DateTime> transDate, Nullable<int> transType)
        {
            var idEmployeeParameter = idEmployee.HasValue ?
                new ObjectParameter("IdEmployee", idEmployee) :
                new ObjectParameter("IdEmployee", typeof(int));
    
            var amountChargeParameter = amountCharge.HasValue ?
                new ObjectParameter("AmountCharge", amountCharge) :
                new ObjectParameter("AmountCharge", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MovCxCEmployee", idEmployeeParameter, amountChargeParameter, transDateParameter, transTypeParameter);
        }
    
        public virtual int SP_OrderPending(string idProduct, string qty, string idTable, string price, Nullable<int> idx, ObjectParameter error, ObjectParameter messageP)
        {
            var idProductParameter = idProduct != null ?
                new ObjectParameter("IdProduct", idProduct) :
                new ObjectParameter("IdProduct", typeof(string));
    
            var qtyParameter = qty != null ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(string));
    
            var idTableParameter = idTable != null ?
                new ObjectParameter("IdTable", idTable) :
                new ObjectParameter("IdTable", typeof(string));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            var idxParameter = idx.HasValue ?
                new ObjectParameter("Idx", idx) :
                new ObjectParameter("Idx", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_OrderPending", idProductParameter, qtyParameter, idTableParameter, priceParameter, idxParameter, error, messageP);
        }
    
        public virtual int SP_PaidOrders(Nullable<int> amount, Nullable<int> paymentType, Nullable<int> idOrder)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            var idOrderParameter = idOrder.HasValue ?
                new ObjectParameter("IdOrder", idOrder) :
                new ObjectParameter("IdOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PaidOrders", amountParameter, paymentTypeParameter, idOrderParameter);
        }
    
        public virtual int SP_Paysheet(Nullable<int> idEmployee, Nullable<int> amount, Nullable<System.DateTime> paymentDate)
        {
            var idEmployeeParameter = idEmployee.HasValue ?
                new ObjectParameter("IdEmployee", idEmployee) :
                new ObjectParameter("IdEmployee", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Paysheet", idEmployeeParameter, amountParameter, paymentDateParameter);
        }
    
        public virtual int SP_PurchaseMerchandise(string detail, Nullable<int> amount, Nullable<System.DateTime> datePurchase, Nullable<int> qty, Nullable<int> idMerchandise, Nullable<int> idSupplier, Nullable<int> idUser)
        {
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var datePurchaseParameter = datePurchase.HasValue ?
                new ObjectParameter("DatePurchase", datePurchase) :
                new ObjectParameter("DatePurchase", typeof(System.DateTime));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var idMerchandiseParameter = idMerchandise.HasValue ?
                new ObjectParameter("IdMerchandise", idMerchandise) :
                new ObjectParameter("IdMerchandise", typeof(int));
    
            var idSupplierParameter = idSupplier.HasValue ?
                new ObjectParameter("IdSupplier", idSupplier) :
                new ObjectParameter("IdSupplier", typeof(int));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("IdUser", idUser) :
                new ObjectParameter("IdUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PurchaseMerchandise", detailParameter, amountParameter, datePurchaseParameter, qtyParameter, idMerchandiseParameter, idSupplierParameter, idUserParameter);
        }
    
        public virtual int SP_RegisterEmployees(string nameEmployee, string lastName, string cedula, Nullable<int> department, Nullable<int> salary, Nullable<System.DateTime> entryDate, string phone, Nullable<int> payMode)
        {
            var nameEmployeeParameter = nameEmployee != null ?
                new ObjectParameter("NameEmployee", nameEmployee) :
                new ObjectParameter("NameEmployee", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var payModeParameter = payMode.HasValue ?
                new ObjectParameter("PayMode", payMode) :
                new ObjectParameter("PayMode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RegisterEmployees", nameEmployeeParameter, lastNameParameter, cedulaParameter, departmentParameter, salaryParameter, entryDateParameter, phoneParameter, payModeParameter);
        }
    }
}
